Tour monstre :
On se trouve actuellement dans la classe Maze.

deplacementMonstre() :
    coord = monstre.play()
    Si getCell(coord).getState() == EXIT
        on affiche la victoire pour le monstre
    Sinon
        update(coordinate,cellInfo.MONSTER)
        monstre.update(new cellEvent(cellInfo.MONSTER, coordinate, tour))
        on appelle tirerChasseur()


monstre.play() :
    On attend l'input du joueur donnant les coordonnées de la case où il veut se déplacer.
    Si monstre.canMove(Coordinate),
        Alors on retourne les coordonnées de la case.
    Sinon on lui indique qu'il ne peut s'y déplacer et demande de nouvelles coordonnées.

monstre.canMove(Coordinate) :
    Si maze.getCell(Coordinate).getState() == EMPTY et que Coordinate se trouve à une case de distance du monstre.
        Alors on retourne vrai
    Sinon
        on retourne faux

update(Coordinate, cellInfo) :
    setCell(coordinate, cellInfo,tour)

monstre.update(cellEvent) :
    Si cellEvent.getCellInfo() est égale à HUNTER
        on stocke le dernier tire du chasseur
    Sinon
        this.setCell(cellEvent.getCoordinate(),cellInfo.MONSTER,tour)



Tour Chasseur :
On se trouve actuellement dans la classe Maze.

tirerChasseur() :
    coord = chasseur.play()
    Si getCell(coord).getState() == MONSTER et getCell(coord).getTour() == tour
        On affiche la victoire pour le chasseur
    Sinon
        monstre.update( new cellEvent(cellInfo.HUNTER,coordinate,tour))
        caseTirer = on récupère l'information de la case de coordonées 'coord'
        chasseur.update(new cellEvent(caseTirer,coord,tour))
        tour+1
        on appelle deplacementMonstre

chasseur.play() :
    On attend l'input du joueur
    On retourne son input

chasseur.update(cellEvent) :
    this.setCell(cellEvent.getCoordinate(),cellEvent.getState(),cellEvent.getTour())